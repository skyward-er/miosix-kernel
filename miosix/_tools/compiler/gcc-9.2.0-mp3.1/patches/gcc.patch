diff -ruN gcc-9.2.0-old/config/gthr.m4 gcc-9.2.0/config/gthr.m4
--- gcc-9.2.0-old/config/gthr.m4	2012-10-15 15:10:30.000000000 +0200
+++ gcc-9.2.0/config/gthr.m4	2019-09-08 23:12:09.289167562 +0200
@@ -14,6 +14,7 @@
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
+    miosix)	thread_header=config/gthr-miosix.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
     rtems)	thread_header=config/gthr-rtems.h ;;
diff -ruN gcc-9.2.0-old/gcc/config/arm/arm.c gcc-9.2.0/gcc/config/arm/arm.c
--- gcc-9.2.0-old/gcc/config/arm/arm.c	2019-09-08 21:15:31.910408479 +0200
+++ gcc-9.2.0/gcc/config/arm/arm.c	2019-09-08 23:12:13.025201153 +0200
@@ -2758,8 +2758,30 @@
 	}
   }
 
-  if (TARGET_AAPCS_BASED)
-    synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
+  //Rationale:
+  //Compiling code that instantiates C++ static objects on architectures that do
+  //not have memory fence/barrier instructions (e.g: ARM7TDMI) causes undefined
+  //reference to `__sync_synchronize'.
+  //expand_mem_thread_fence() in gcc/optabs.c:6489 tries to emit ASM insn
+  //and failing that, emits the __sync_synchronize call if available.
+  //Synchronize_libfunc is used only in optabs.c and defined only for ARM/MIPS
+  //$ grep -R 'synchronize_libfunc' gcc-9.2.0
+  //libfuncs.h:79:#define synchronize_libfunc    (libfunc_table[LTI_synchronize])
+  //config/arm/arm.c:2776:    synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
+  //config/mips/mips.c:13535:      synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
+  //optabs.c:6500:  else if (synchronize_libfunc != NULL_RTX)
+  //optabs.c:6501:    emit_library_call (synchronize_libfunc, LCT_NORMAL, VOIDmode);
+  //$ grep -Rn 'LTI_synchronize' gcc-9.2.0
+  //libfuncs.h:29:  LTI_synchronize,
+  //libfuncs.h:79:#define synchronize_libfunc (libfunc_table[LTI_synchronize])
+  //The ARM implementation is in libgcc and only exists for linux and bsd.
+  //
+  //Solution: remove given ARM7TDMI don't need hardware memory barriers at all.
+  //
+  //When updating patches to new compiler, check that cortex-M targets have
+  //dmb instructions, while ARM7TDMI code has no calls to __sync_synchronize.
+  //if (TARGET_AAPCS_BASED)
+  //  synchronize_libfunc = init_one_libfunc ("__sync_synchronize");
 
   speculation_barrier_libfunc = init_one_libfunc ("__speculation_barrier");
 }
diff -ruN gcc-9.2.0-old/gcc/config/arm/miosix-eabi.h gcc-9.2.0/gcc/config/arm/miosix-eabi.h
--- gcc-9.2.0-old/gcc/config/arm/miosix-eabi.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-9.2.0/gcc/config/arm/miosix-eabi.h	2019-09-08 23:12:11.793190080 +0200
@@ -0,0 +1,19 @@
+
+/*
+ * RATIONALE: adding builtin_define to always define _MIOSIX
+ * - when libgcc/libstdc++/newlib are compiled, as there are some #ifdef _MIOSIX
+ * - when Miosix processes are compiled, to allow #ifdef _MIOSIX
+ * Also add versioning to miosix-specific compiler patches.
+ * Note: intentionally breaking compatibility with previous compiler patches
+ * which defined _MIOSIX_GCC_PATCH_VERSION instead of _MIOSIX_GCC_PATCH_MAJOR
+ */
+
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()         \
+    do {                                 \
+        TARGET_BPABI_CPP_BUILTINS();     \
+        builtin_define("_MIOSIX");       \
+        builtin_define("_MIOSIX_GCC_PATCH_MAJOR=3"); \
+        builtin_define("_MIOSIX_GCC_PATCH_MINOR=1"); \
+        builtin_assert("system=miosix"); \
+    } while(false)
diff -ruN gcc-9.2.0-old/gcc/config/arm/t-arm-miosix gcc-9.2.0/gcc/config/arm/t-arm-miosix
--- gcc-9.2.0-old/gcc/config/arm/t-arm-miosix	1970-01-01 01:00:00.000000000 +0100
+++ gcc-9.2.0/gcc/config/arm/t-arm-miosix	2019-09-08 23:12:11.793190080 +0200
@@ -0,0 +1,49 @@
+
+## RATIONALE: build multilibs for ARM, Cortex-Mx, and the pie versions
+
+## To update this file, first have a look in t-arm-elf to see if some new
+## variable has been added
+## According to https://gcc.gnu.org/onlinedocs/gccint/Target-Fragment.html
+## MULTILIB_REQUIRED has been introduced replacing the awkwardly long
+## MULTILIB_EXCEPTIONS list.
+
+MULTILIB_OPTIONS     =
+MULTILIB_DIRNAMES    =
+MULTILIB_MATCHES     =
+MULTILIB_EXCEPTIONS  = 
+MULTILIB_REQUIRED    =
+MULTILIB_REUSE       =
+
+MULTILIB_OPTIONS    += mthumb
+MULTILIB_DIRNAMES   += thumb
+
+MULTILIB_OPTIONS    += mcpu=cortex-m0/mcpu=cortex-m3/mcpu=cortex-m4/mcpu=cortex-m7
+MULTILIB_DIRNAMES   += cm0 cm3 cm4 cm7
+
+MULTILIB_OPTIONS    += mfloat-abi=hard
+MULTILIB_DIRNAMES   += hardfp
+
+MULTILIB_OPTIONS    += mfpu=fpv4-sp-d16/mfpu=fpv5-d16
+MULTILIB_DIRNAMES   += fpv4sp fpv5
+
+MULTILIB_OPTIONS    += fpie msingle-pic-base
+MULTILIB_DIRNAMES   += pie single-pic-base
+
+## The following multilibs will be built:
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m0
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m3
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m4/mfloat-abi=hard/mfpu=fpv4-sp-d16
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m7/mfloat-abi=hard/mfpu=fpv5-d16
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m3/fpie/msingle-pic-base
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m4/mfloat-abi=hard/mfpu=fpv4-sp-d16/fpie/msingle-pic-base
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m7/mfloat-abi=hard/mfpu=fpv5-d16/fpie/msingle-pic-base
+
+# The output produced by 'arm-miosix-eabi-gcc --print-multi-lib' is
+# .;
+# thumb/cm0;@mthumb@mcpu=cortex-m0
+# thumb/cm3;@mthumb@mcpu=cortex-m3
+# thumb/cm3/pie/single-pic-base;@mthumb@mcpu=cortex-m3@fpie@msingle-pic-base
+# thumb/cm4/hardfp/fpv4sp;@mthumb@mcpu=cortex-m4@mfloat-abi=hard@mfpu=fpv4-sp-d16
+# thumb/cm4/hardfp/fpv4sp/pie/single-pic-base;@mthumb@mcpu=cortex-m4@mfloat-abi=hard@mfpu=fpv4-sp-d16@fpie@msingle-pic-base
+# thumb/cm7/hardfp/fpv5;@mthumb@mcpu=cortex-m7@mfloat-abi=hard@mfpu=fpv5-d16
+# thumb/cm7/hardfp/fpv5/pie/single-pic-base;@mthumb@mcpu=cortex-m7@mfloat-abi=hard@mfpu=fpv5-d16@fpie@msingle-pic-base
diff -ruN gcc-9.2.0-old/gcc/config.gcc gcc-9.2.0/gcc/config.gcc
--- gcc-9.2.0-old/gcc/config.gcc	2019-08-03 22:16:22.000000000 +0200
+++ gcc-9.2.0/gcc/config.gcc	2019-09-08 23:12:11.793190080 +0200
@@ -1218,6 +1218,13 @@
 	tmake_file="${tmake_file} arm/t-arm arm/t-arm-elf"
 	target_cpu_cname="arm7tdmi"
 	case ${target} in
+	arm*-miosix-eabi*)
+	  # Copy options from arm*-*-eabi*, add the miosix-specific ones
+	  # and make sure arm/t-arm-elf is not added to tmake_file
+	  tm_file="${tm_file} newlib-stdint.h arm/miosix-eabi.h"  # Append
+	  tmake_file="arm/t-arm arm/t-arm-miosix arm/t-bpabi"     # Replace
+	  use_gcc_stdint=wrap
+	  ;;
 	arm*-*-eabi*)
 	  tm_file="$tm_file newlib-stdint.h"
 	  tmake_file="${tmake_file} arm/t-bpabi"
diff -ruN gcc-9.2.0-old/gcc/configure gcc-9.2.0/gcc/configure
--- gcc-9.2.0-old/gcc/configure	2019-06-26 11:15:46.000000000 +0200
+++ gcc-9.2.0/gcc/configure	2019-09-08 23:12:11.797190116 +0200
@@ -11860,7 +11860,7 @@
     # default
     target_thread_file='single'
     ;;
-  aix | dce | lynx | mipssde | posix | rtems | \
+  aix | dce | lynx | miosix | mipssde | posix | rtems | \
   single | tpf | vxworks | win32)
     target_thread_file=${enable_threads}
     ;;
diff -ruN gcc-9.2.0-old/gcc/configure.ac gcc-9.2.0/gcc/configure.ac
--- gcc-9.2.0-old/gcc/configure.ac	2019-06-26 11:15:46.000000000 +0200
+++ gcc-9.2.0/gcc/configure.ac	2019-09-08 23:12:12.957200542 +0200
@@ -1646,7 +1646,7 @@
     # default
     target_thread_file='single'
     ;;
-  aix | dce | lynx | mipssde | posix | rtems | \
+  aix | dce | lynx | miosix | mipssde | posix | rtems | \
   single | tpf | vxworks | win32)
     target_thread_file=${enable_threads}
     ;;
diff -ruN gcc-9.2.0-old/libatomic/config/miosix/host-config.h gcc-9.2.0/libatomic/config/miosix/host-config.h
--- gcc-9.2.0-old/libatomic/config/miosix/host-config.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-9.2.0/libatomic/config/miosix/host-config.h	2019-09-08 23:12:12.997200901 +0200
@@ -0,0 +1,23 @@
+
+/*
+ * According to libatomic_i.h, here we should implement
+ * - UWORD protect_start(void *ptr);
+ * - void protect_end(void *ptr, UWORD token);
+ * which are used by fop_n.c fop_n.c cas_n.c exch_n.c tas_n.c store_n.c for
+ * 'small' operations.
+ */
+
+unsigned int libat_quick_lock_n(void *ptr);
+void libat_quick_unlock_n(void *ptr, unsigned int token);
+
+static inline UWORD protect_start(void *ptr)
+{
+	return libat_quick_lock_n(ptr);
+}
+
+static inline void protect_end(void *ptr, UWORD token)
+{
+	libat_quick_unlock_n(ptr, token);
+}
+
+#include_next <host-config.h>
diff -ruN gcc-9.2.0-old/libatomic/config/miosix/lock.c gcc-9.2.0/libatomic/config/miosix/lock.c
--- gcc-9.2.0-old/libatomic/config/miosix/lock.c	1970-01-01 01:00:00.000000000 +0100
+++ gcc-9.2.0/libatomic/config/miosix/lock.c	2019-09-08 23:12:12.997200901 +0200
@@ -0,0 +1,13 @@
+
+/*
+ * According to libatomic_i.h, here we should implement
+ * - void libat_lock_n(void *ptr, size_t n);
+ * - void libat_unlock_n(void *ptr, size_t n);
+ * which are used by gexch.c gcas.c gload.c gstore.c for 'large' operations.
+ *
+ * Except, we don't. These function may be directly implemented in Miosix should
+ * the need arise, or intentionally left as undefined references if large
+ * locking intrinsics are to be disallowed.
+ */
+
+#include "libatomic_i.h"
diff -ruN gcc-9.2.0-old/libatomic/configure.tgt gcc-9.2.0/libatomic/configure.tgt
--- gcc-9.2.0-old/libatomic/configure.tgt	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libatomic/configure.tgt	2019-09-08 23:12:12.997200901 +0200
@@ -154,6 +154,10 @@
         esac
 	;;
 
+  arm*-miosix-eabi*)
+	config_path="miosix"
+	;;
+
   *-*-rtems*)
 	XCFLAGS="${configure_tgt_pre_target_cpu_XCFLAGS}"
 	config_path="rtems"
diff -ruN gcc-9.2.0-old/libgcc/config/gthr-miosix.h gcc-9.2.0/libgcc/config/gthr-miosix.h
--- gcc-9.2.0-old/libgcc/config/gthr-miosix.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-9.2.0/libgcc/config/gthr-miosix.h	2019-09-09 00:48:31.257496721 +0200
@@ -0,0 +1,93 @@
+
+// RATIONALE: make the code generated by GCC thread safe by providing a thread model
+
+#ifndef GCC_GHTR_MIOSIX_H
+#define GCC_GHTR_MIOSIX_H
+
+#include <pthread.h>
+#include <unistd.h>
+#include <sched.h>
+
+//Note to self: gthr.h contains useful information
+//on how a gthr-xxx.h should look like
+
+#define __GTHREADS 1
+#define __GTHREAD_HAS_COND 1
+#define __GTHREADS_CXX0X 1
+//Found in libstdc++
+#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
+
+//In Miosix, threads are always enabled, period.
+#define __gthread_active_p() 1
+
+typedef pthread_t       __gthread_t;
+typedef pthread_key_t   __gthread_key_t; //This actually is unimplemented
+typedef pthread_once_t  __gthread_once_t;
+typedef pthread_mutex_t __gthread_mutex_t;
+typedef pthread_mutex_t __gthread_recursive_mutex_t;
+typedef pthread_cond_t  __gthread_cond_t;
+typedef struct timespec __gthread_time_t;
+
+#define __GTHREAD_ONCE_INIT                     PTHREAD_ONCE_INIT
+#define __GTHREAD_MUTEX_INIT                    PTHREAD_MUTEX_INITIALIZER
+#define __GTHREAD_MUTEX_INIT_FUNCTION           __gthread_mutex_init_function
+#define __GTHREAD_RECURSIVE_MUTEX_INIT          PTHREAD_MUTEX_RECURSIVE_INITIALIZER_NP
+#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function
+#define __GTHREAD_COND_INIT                     PTHREAD_COND_INITIALIZER
+#define __GTHREAD_COND_INIT_FUNCTION            __gthread_cond_init_function
+#define __GTHREAD_TIME_INIT                     {0,0}
+
+#define __gthread_once                    pthread_once
+#define __gthread_mutex_destroy           pthread_mutex_destroy
+#define __gthread_recursive_mutex_destroy pthread_mutex_destroy
+#define __gthread_cond_destroy            pthread_cond_destroy
+#define __gthread_mutex_lock              pthread_mutex_lock
+#define __gthread_mutex_trylock           pthread_mutex_trylock
+#define __gthread_mutex_unlock            pthread_mutex_unlock
+#define __gthread_recursive_mutex_lock    pthread_mutex_lock
+#define __gthread_recursive_mutex_trylock pthread_mutex_trylock
+#define __gthread_recursive_mutex_unlock  pthread_mutex_unlock
+#define __gthread_cond_signal             pthread_cond_signal
+#define __gthread_cond_broadcast          pthread_cond_broadcast
+#define __gthread_cond_wait               pthread_cond_wait
+#define __gthread_cond_wait_recursive     pthread_cond_wait
+#define __gthread_join                    pthread_join
+#define __gthread_detach                  pthread_detach
+#define __gthread_equal                   pthread_equal
+#define __gthread_self                    pthread_self
+#define __gthread_yield                   sched_yield
+
+//These actually aren't implemented in Miosix, so code trying to use these will
+//fail to link, and for now it's the "desired" behaviour (better than failing
+//at runtime, at least). They are used somewhere in libstdc++ too, but it can
+//be patched to remove those uses.
+#define __gthread_key_create                pthread_key_create
+#define __gthread_key_delete                pthread_key_delete
+#define __gthread_getspecific               pthread_getspecific
+#define __gthread_setspecific               pthread_setspecific
+#define __gthread_mutex_timedlock           pthread_mutex_timedlock
+#define __gthread_recursive_mutex_timedlock pthread_mutex_timedlock
+#define __gthread_cond_timedwait            pthread_cond_timedwait
+
+static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex)
+{
+    pthread_mutex_init(__mutex, NULL);
+}
+
+static inline void __gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t *__mutex)
+{
+    //Defined in newlib patches for Miosix
+    __lock_init_recursive(*__mutex);
+}
+
+static inline void __gthread_cond_init_function(__gthread_cond_t *__cond)
+{
+    pthread_cond_init(__cond, NULL);
+}
+
+static inline int __gthread_create(__gthread_t *__thrd, void *(*__func)(void*), void *__args)
+{
+    return pthread_create(__thrd, NULL, __func, __args);
+}
+
+#endif //GCC_GHTR_MIOSIX_H
diff -ruN gcc-9.2.0-old/libgcc/configure gcc-9.2.0/libgcc/configure
--- gcc-9.2.0-old/libgcc/configure	2018-10-31 18:03:16.000000000 +0100
+++ gcc-9.2.0/libgcc/configure	2019-09-08 23:12:13.001200937 +0200
@@ -5543,6 +5543,7 @@
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
+    miosix)	thread_header=config/gthr-miosix.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
     rtems)	thread_header=config/gthr-rtems.h ;;
diff -ruN gcc-9.2.0-old/libgcc/unwind-sjlj.c gcc-9.2.0/libgcc/unwind-sjlj.c
--- gcc-9.2.0-old/libgcc/unwind-sjlj.c	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libgcc/unwind-sjlj.c	2019-09-08 23:12:13.001200937 +0200
@@ -91,7 +91,14 @@
   _Unwind_Personality_Fn personality;
 } _Unwind_FrameState;
 
-
+
+// RATIONALE: _Miosix_set_sjlj_ptr and _Miosix_get_sjlj_ptr make
+// exception handling thread-safe even if Miosix does not support TLS
+// NOTE: C++ uses exception support is in eh_globals.cc, is there any code that
+// triggers these to be called? Otherwise we may either keep them if Miosix
+// will support architectures with sjlj exceptions, or even remove this patch
+#ifndef _MIOSIX
+
 /* Manage the chain of registered function contexts.  */
 
 /* Single threaded fallback chain.  */
@@ -163,6 +170,32 @@
     fc_static = fc;
 }
 
+#else //_MIOSIX
+
+void _Miosix_set_sjlj_ptr(void* ptr);
+void *_Miosix_get_sjlj_ptr();
+
+void
+_Unwind_SjLj_Register (struct SjLj_Function_Context *fc)
+{
+  fc->prev=_Miosix_get_sjlj_ptr();
+  _Miosix_set_sjlj_ptr(fc);
+}
+
+static inline struct SjLj_Function_Context *
+_Unwind_SjLj_GetContext (void)
+{
+  return _Miosix_get_sjlj_ptr();
+}
+
+static inline void
+_Unwind_SjLj_SetContext (struct SjLj_Function_Context *fc)
+{
+  _Miosix_set_sjlj_ptr(fc);
+}
+
+#endif //_MIOSIX
+
 void
 _Unwind_SjLj_Unregister (struct SjLj_Function_Context *fc)
 {
diff -ruN gcc-9.2.0-old/libstdc++-v3/configure gcc-9.2.0/libstdc++-v3/configure
--- gcc-9.2.0-old/libstdc++-v3/configure	2019-07-03 23:09:13.000000000 +0200
+++ gcc-9.2.0/libstdc++-v3/configure	2019-09-08 23:12:13.013201044 +0200
@@ -15419,6 +15419,7 @@
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
+    miosix)	thread_header=config/gthr-miosix.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
     rtems)	thread_header=config/gthr-rtems.h ;;
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/bad_array_length.cc gcc-9.2.0/libstdc++-v3/libsupc++/bad_array_length.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/bad_array_length.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/bad_array_length.cc	2019-09-08 23:12:13.017201081 +0200
@@ -48,9 +48,18 @@
 
 } // namespace std
 
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace __cxxabiv1 {
 
-extern "C" void
+extern "C" void AW
 __cxa_throw_bad_array_length ()
 { _GLIBCXX_THROW_OR_ABORT(std::bad_array_length()); }
 
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_alloc.cc gcc-9.2.0/libstdc++-v3/libsupc++/eh_alloc.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_alloc.cc	2019-01-21 12:47:30.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/eh_alloc.cc	2019-09-08 23:12:13.017201081 +0200
@@ -73,6 +73,14 @@
 # define EMERGENCY_OBJ_COUNT	4
 #endif
 
+//RATIONALE: reduced emergency buffer for ARM microcontrollers, saves RAM
+#ifdef _MIOSIX
+# undef EMERGENCY_OBJ_SIZE
+# undef EMERGENCY_OBJ_COUNT
+# define EMERGENCY_OBJ_SIZE  160
+# define EMERGENCY_OBJ_COUNT 3
+#endif
+
 namespace __gnu_cxx
 {
   void __freeres();
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_aux_runtime.cc gcc-9.2.0/libstdc++-v3/libsupc++/eh_aux_runtime.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_aux_runtime.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/eh_aux_runtime.cc	2019-09-08 23:12:13.017201081 +0200
@@ -29,14 +29,23 @@
 #include "unwind-cxx.h"
 #include <bits/exception_defines.h>
 
-extern "C" void
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
+extern "C" void AW
 __cxxabiv1::__cxa_bad_cast ()
 { _GLIBCXX_THROW_OR_ABORT(std::bad_cast()); }
 
-extern "C" void
+extern "C" void AW
 __cxxabiv1::__cxa_bad_typeid ()
 { _GLIBCXX_THROW_OR_ABORT(std::bad_typeid()); }
 
-extern "C" void
+extern "C" void AW
 __cxxabiv1::__cxa_throw_bad_array_new_length ()
 { _GLIBCXX_THROW_OR_ABORT(std::bad_array_new_length()); }
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_globals.cc gcc-9.2.0/libstdc++-v3/libsupc++/eh_globals.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_globals.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/eh_globals.cc	2019-09-08 23:12:13.017201081 +0200
@@ -41,6 +41,11 @@
 
 using namespace __cxxabiv1;
 
+// RATIONALE: __cxa_get_globals() and __cxa_get_globals_fast() have been made
+// Miosix syscalls since the __cxa_eh_globals struct needs to be provided on
+// a per-thread basis but Miosix does not support TLS
+#ifndef _MIOSIX
+
 #if _GLIBCXX_HAVE_TLS
 
 namespace
@@ -157,3 +162,5 @@
 #endif
 
 #endif
+
+#endif //_MIOSIX
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_terminate.cc gcc-9.2.0/libstdc++-v3/libsupc++/eh_terminate.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/eh_terminate.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/eh_terminate.cc	2019-09-08 23:12:13.017201081 +0200
@@ -37,6 +37,15 @@
 }
 #endif
 
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 using namespace __cxxabiv1;
 
 void
@@ -51,7 +60,7 @@
     { std::abort (); }
 }
 
-void
+void AW
 std::terminate () throw()
 {
   __terminate (get_terminate ());
@@ -64,7 +73,7 @@
   std::terminate ();
 }
 
-void
+void AW
 std::unexpected ()
 {
   __unexpected (get_unexpected ());
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/guard.cc gcc-9.2.0/libstdc++-v3/libsupc++/guard.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/guard.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/guard.cc	2019-09-08 23:12:13.017201081 +0200
@@ -190,6 +190,11 @@
 //  | _GLIBCXX_GUARD_WAITING_BIT) and some other threads are waiting until
 //				  it is initialized.
 
+// RATIONALE: __cxa_guard_[acquire|release|abort] have been made Miosix syscalls
+// as static object initialization can occur also before the kernel is started,
+// therefore at a time when using pthread_mutexe and pthread_cond is unsafe.
+#ifndef _MIOSIX
+
 namespace __cxxabiv1 
 {
 #ifdef _GLIBCXX_USE_FUTEX
@@ -425,3 +430,5 @@
 #endif
   }
 }
+
+#endif //_MIOSIX
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/pure.cc gcc-9.2.0/libstdc++-v3/libsupc++/pure.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/pure.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/pure.cc	2019-09-08 23:12:13.017201081 +0200
@@ -43,14 +43,23 @@
 # define writestr(str) /* Empty */
 #endif
 
-extern "C" void
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
+extern "C" void AW
 __cxxabiv1::__cxa_pure_virtual (void)
 {
   writestr ("pure virtual method called\n");
   std::terminate ();
 }
 
-extern "C" void
+extern "C" void AW
 __cxxabiv1::__cxa_deleted_virtual (void)
 {
   writestr ("deleted virtual method called\n");
diff -ruN gcc-9.2.0-old/libstdc++-v3/libsupc++/vterminate.cc gcc-9.2.0/libstdc++-v3/libsupc++/vterminate.cc
--- gcc-9.2.0-old/libstdc++-v3/libsupc++/vterminate.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/libsupc++/vterminate.cc	2019-09-08 23:12:13.017201081 +0200
@@ -34,6 +34,14 @@
 using namespace std;
 using namespace abi;
 
+// RATIONALE: add __attribute__((weak)) to make __verbose_terminate_handler
+// overridable to save the code size of __cxa_demangle
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace __gnu_cxx
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
@@ -41,7 +49,7 @@
   // A replacement for the standard terminate_handler which prints
   // more information about the terminating exception (if any) on
   // stderr.
-  void __verbose_terminate_handler()
+  void AW __verbose_terminate_handler()
   {
     static bool terminating;
     if (terminating)
diff -ruN gcc-9.2.0-old/libstdc++-v3/src/c++11/functexcept.cc gcc-9.2.0/libstdc++-v3/src/c++11/functexcept.cc
--- gcc-9.2.0-old/libstdc++-v3/src/c++11/functexcept.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/src/c++11/functexcept.cc	2019-09-08 23:12:13.017201081 +0200
@@ -35,6 +35,15 @@
 # define _(msgid)   (msgid)
 #endif
 
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace __gnu_cxx
 {
   int __snprintf_lite(char *__buf, size_t __bufsize, const char *__fmt,
@@ -45,49 +54,55 @@
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
-  void
+  void AW
   __throw_bad_exception()
   { _GLIBCXX_THROW_OR_ABORT(bad_exception()); }
 
-  void
+  void AW
   __throw_bad_alloc()
   { _GLIBCXX_THROW_OR_ABORT(bad_alloc()); }
 
-  void
+  void AW
   __throw_bad_cast()
   { _GLIBCXX_THROW_OR_ABORT(bad_cast()); }
 
-  void
+  void AW
   __throw_bad_typeid()
   { _GLIBCXX_THROW_OR_ABORT(bad_typeid()); }
 
-  void
+  void AW
   __throw_logic_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(logic_error(_(__s))); }
 
-  void
+  void AW
   __throw_domain_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(domain_error(_(__s))); }
 
-  void
+  void AW
   __throw_invalid_argument(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(invalid_argument(_(__s))); }
 
-  void
+  void AW
   __throw_length_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(length_error(_(__s))); }
 
-  void
+  void AW
   __throw_out_of_range(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(out_of_range(_(__s))); }
 
-  void
+  void AW
   __throw_out_of_range_fmt(const char* __fmt, ...)
   {
     const size_t __len = __builtin_strlen(__fmt);
+    #ifdef _MIOSIX
+    //Longest string found is in include/std/string_view (26Bytes)
+    //+2*11Bytes (required to print largest int) + NUL = ~50Bytes
+    const size_t __alloca_size = __len + 50;
+    #else
     // We expect at most 2 numbers, and 1 short string. The additional
     // 512 bytes should provide more than enough space for expansion.
     const size_t __alloca_size = __len + 512;
+    #endif
     char *const __s = static_cast<char*>(__builtin_alloca(__alloca_size));
     va_list __ap;
 
@@ -97,19 +112,19 @@
     va_end(__ap);  // Not reached.
   }
 
-  void
+  void AW
   __throw_runtime_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(runtime_error(_(__s))); }
 
-  void
+  void AW
   __throw_range_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(range_error(_(__s))); }
 
-  void
+  void AW
   __throw_overflow_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(overflow_error(_(__s))); }
 
-  void
+  void AW
   __throw_underflow_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(underflow_error(_(__s))); }
 
diff -ruN gcc-9.2.0-old/libstdc++-v3/src/c++11/functional.cc gcc-9.2.0/libstdc++-v3/src/c++11/functional.cc
--- gcc-9.2.0-old/libstdc++-v3/src/c++11/functional.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/src/c++11/functional.cc	2019-09-08 23:12:13.017201081 +0200
@@ -25,11 +25,20 @@
 #include <functional>
 #include <bits/functexcept.h>
 
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace std _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
-  void
+  void AW
   __throw_bad_function_call()
   { _GLIBCXX_THROW_OR_ABORT(bad_function_call()); }
 
diff -ruN gcc-9.2.0-old/libstdc++-v3/src/c++11/future.cc gcc-9.2.0/libstdc++-v3/src/c++11/future.cc
--- gcc-9.2.0-old/libstdc++-v3/src/c++11/future.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/src/c++11/future.cc	2019-09-08 23:12:13.017201081 +0200
@@ -25,6 +25,15 @@
 #include <future>
 #include <bits/functexcept.h>
 
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace
 {
   struct future_error_category : public std::error_category
@@ -71,7 +80,7 @@
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
-  void
+  void AW
   __throw_future_error(int __i __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(future_error(make_error_code(future_errc(__i)))); }
 
diff -ruN gcc-9.2.0-old/libstdc++-v3/src/c++11/snprintf_lite.cc gcc-9.2.0/libstdc++-v3/src/c++11/snprintf_lite.cc
--- gcc-9.2.0-old/libstdc++-v3/src/c++11/snprintf_lite.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/src/c++11/snprintf_lite.cc	2019-09-08 23:12:13.017201081 +0200
@@ -37,7 +37,22 @@
 }
 
 namespace __gnu_cxx {
+  #ifdef _MIOSIX
+  //If space runs out don't do yet another alloca which may cause stack overflow,
+  //just don't expand formats...
+  int __insufficient_space(char *__buf, size_t __bufsize, const char *__fmt)
+    __attribute__((__noinline__));
 
+  int __insufficient_space(char *__buf, size_t __bufsize, const char *__fmt)
+  {
+      size_t __len = __builtin_strlen(__fmt);
+      if(__len > __bufsize - 1) __len = __bufsize - 1;
+      __builtin_memcpy(__buf, __fmt, __len);
+      __buf[__len] = '\0';
+      return __len;
+  }
+  #define __INSUFFICIENT_SPACE return __insufficient_space(__buf, __bufsize, __fmt);
+  #else
   // Private helper to throw logic error if snprintf_lite runs out
   // of space (which is not expected to ever happen).
   // NUL-terminates __buf.
@@ -63,7 +78,8 @@
     __e[__errlen + __len - 1] = '\0';
     std::__throw_logic_error(__e);
   }
-
+  #define __INSUFFICIENT_SPACE __throw_insufficient_space(__buf, __d);
+  #endif
 
   // Private routine to append decimal representation of VAL to the given
   // BUFFER, but not more than BUFSIZE characters.
@@ -122,7 +138,7 @@
 
 		if (__v[0] != '\0')
 		  // Not enough space for __fmt expansion.
-		  __throw_insufficient_space(__buf, __d);
+		  __INSUFFICIENT_SPACE
 
 		__s += 2;  // Step over %s.
 		continue;
@@ -137,7 +153,7 @@
 		    __d += __len;
 		  else
 		    // Not enough space for __fmt expansion.
-		    __throw_insufficient_space(__buf, __d);
+		    __INSUFFICIENT_SPACE
 
 		  __s += 3;  // Step over %zu
 		  continue;
@@ -150,7 +166,7 @@
 
     if (__s[0] != '\0')
       // Not enough space for __fmt expansion.
-      __throw_insufficient_space(__buf, __d);
+      __INSUFFICIENT_SPACE
 
     *__d = '\0';
     return __d - __buf;
diff -ruN gcc-9.2.0-old/libstdc++-v3/src/c++11/system_error.cc gcc-9.2.0/libstdc++-v3/src/c++11/system_error.cc
--- gcc-9.2.0-old/libstdc++-v3/src/c++11/system_error.cc	2019-01-01 13:31:55.000000000 +0100
+++ gcc-9.2.0/libstdc++-v3/src/c++11/system_error.cc	2019-09-08 23:12:13.017201081 +0200
@@ -32,6 +32,15 @@
 #include <errno.h>
 #undef __sso_string
 
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace
 {
   using std::string;
@@ -331,7 +340,7 @@
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
-  void
+  void AW
   __throw_system_error(int __i __attribute__((unused)))
   {
     _GLIBCXX_THROW_OR_ABORT(system_error(error_code(__i, generic_category())));

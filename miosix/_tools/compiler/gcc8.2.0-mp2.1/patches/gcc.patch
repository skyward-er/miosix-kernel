diff -ruN gcc-8.2.0-old/config/gthr.m4 gcc-8.2.0/config/gthr.m4
--- gcc-8.2.0-old/config/gthr.m4	2012-10-15 15:10:30.000000000 +0200
+++ gcc-8.2.0/config/gthr.m4	2018-08-26 16:26:15.031486302 +0200
@@ -14,6 +14,7 @@
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
+    miosix)	thread_header=config/gthr-miosix.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
     rtems)	thread_header=config/gthr-rtems.h ;;
diff -ruN gcc-8.2.0-old/gcc/config/arm/miosix-eabi.h gcc-8.2.0/gcc/config/arm/miosix-eabi.h
--- gcc-8.2.0-old/gcc/config/arm/miosix-eabi.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-8.2.0/gcc/config/arm/miosix-eabi.h	2018-08-26 16:26:15.035486303 +0200
@@ -0,0 +1,19 @@
+
+/*
+ * RATIONALE: adding builtin_define to always define _MIOSIX
+ * - when libgcc/libstdc++/newlib are compiled, as there are some #ifdef _MIOSIX
+ * - when Miosix processes are compiled, to allow #ifdef _MIOSIX
+ * Also add versioning to miosix-specific compiler patches.
+ * Note: intentionally breaking compatibility with previous compiler patches
+ * which defined _MIOSIX_GCC_PATCH_VERSION instead of _MIOSIX_GCC_PATCH_MAJOR
+ */
+
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()         \
+    do {                                 \
+        TARGET_BPABI_CPP_BUILTINS();     \
+        builtin_define("_MIOSIX");       \
+        builtin_define("_MIOSIX_GCC_PATCH_MAJOR=2"); \
+        builtin_define("_MIOSIX_GCC_PATCH_MINOR=1"); \
+        builtin_assert("system=miosix"); \
+    } while(false)
diff -ruN gcc-8.2.0-old/gcc/config/arm/t-arm-miosix gcc-8.2.0/gcc/config/arm/t-arm-miosix
--- gcc-8.2.0-old/gcc/config/arm/t-arm-miosix	1970-01-01 01:00:00.000000000 +0100
+++ gcc-8.2.0/gcc/config/arm/t-arm-miosix	2018-08-26 16:26:15.035486303 +0200
@@ -0,0 +1,49 @@
+
+## RATIONALE: build multilibs for ARM, Cortex-Mx, and the pie versions
+
+## To update this file, first have a look in t-arm-elf to see if some new
+## variable has been added
+## According to https://gcc.gnu.org/onlinedocs/gccint/Target-Fragment.html
+## MULTILIB_REQUIRED has been introduced replacing the awkwardly long
+## MULTILIB_EXCEPTIONS list.
+
+MULTILIB_OPTIONS     =
+MULTILIB_DIRNAMES    =
+MULTILIB_MATCHES     =
+MULTILIB_EXCEPTIONS  = 
+MULTILIB_REQUIRED    =
+MULTILIB_REUSE       =
+
+MULTILIB_OPTIONS    += marm/mthumb
+MULTILIB_DIRNAMES   += arm thumb
+
+MULTILIB_OPTIONS    += mcpu=cortex-m3/mcpu=cortex-m4/mcpu=cortex-m7
+MULTILIB_DIRNAMES   += cm3 cm4 cm7
+
+MULTILIB_OPTIONS    += mfloat-abi=hard
+MULTILIB_DIRNAMES   += hardfp
+
+MULTILIB_OPTIONS    += mfpu=fpv4-sp-d16/mfpu=fpv5-d16
+MULTILIB_DIRNAMES   += fpv4sp fpv5
+
+MULTILIB_OPTIONS    += fpie msingle-pic-base
+MULTILIB_DIRNAMES   += pie single-pic-base
+
+## The following multilibs will be built:
+MULTILIB_REQUIRED   += marm
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m3
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m4/mfloat-abi=hard/mfpu=fpv4-sp-d16
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m7/mfloat-abi=hard/mfpu=fpv5-d16
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m3/fpie/msingle-pic-base
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m4/mfloat-abi=hard/mfpu=fpv4-sp-d16/fpie/msingle-pic-base
+MULTILIB_REQUIRED   += mthumb/mcpu=cortex-m7/mfloat-abi=hard/mfpu=fpv5-d16/fpie/msingle-pic-base
+
+# The output produced by 'arm-miosix-eabi-gcc --print-multi-lib' is
+# .;
+# arm;@marm
+# thumb/cm3;@mthumb@mcpu=cortex-m3
+# thumb/cm3/pie/single-pic-base;@mthumb@mcpu=cortex-m3@fpie@msingle-pic-base
+# thumb/cm4/hardfp/fpv4sp;@mthumb@mcpu=cortex-m4@mfloat-abi=hard@mfpu=fpv4-sp-d16
+# thumb/cm4/hardfp/fpv4sp/pie/single-pic-base;@mthumb@mcpu=cortex-m4@mfloat-abi=hard@mfpu=fpv4-sp-d16@fpie@msingle-pic-base
+# thumb/cm7/hardfp/fpv5;@mthumb@mcpu=cortex-m7@mfloat-abi=hard@mfpu=fpv5-d16
+# thumb/cm7/hardfp/fpv5/pie/single-pic-base;@mthumb@mcpu=cortex-m7@mfloat-abi=hard@mfpu=fpv5-d16@fpie@msingle-pic-base
diff -ruN gcc-8.2.0-old/gcc/config.gcc gcc-8.2.0/gcc/config.gcc
--- gcc-8.2.0-old/gcc/config.gcc	2018-06-25 21:34:01.000000000 +0200
+++ gcc-8.2.0/gcc/config.gcc	2018-08-26 16:26:15.035486303 +0200
@@ -1179,6 +1179,13 @@
 	tmake_file="${tmake_file} arm/t-arm arm/t-arm-elf"
 	target_cpu_cname="arm7tdmi"
 	case ${target} in
+	arm*-miosix-eabi*)
+	  # Copy options from arm*-*-eabi*, add the miosix-specific ones
+	  # and make sure arm/t-arm-elf is not added to tmake_file
+	  tm_file="${tm_file} newlib-stdint.h arm/miosix-eabi.h"  # Append
+	  tmake_file="arm/t-arm arm/t-arm-miosix arm/t-bpabi"     # Replace
+	  use_gcc_stdint=wrap
+	  ;;
 	arm*-*-eabi*)
 	  tm_file="$tm_file newlib-stdint.h"
 	  tmake_file="${tmake_file} arm/t-bpabi"
diff -ruN gcc-8.2.0-old/gcc/configure gcc-8.2.0/gcc/configure
--- gcc-8.2.0-old/gcc/configure	2018-04-18 11:46:58.000000000 +0200
+++ gcc-8.2.0/gcc/configure	2018-08-26 16:26:15.035486303 +0200
@@ -11692,7 +11692,7 @@
     # default
     target_thread_file='single'
     ;;
-  aix | dce | lynx | mipssde | posix | rtems | \
+  aix | dce | lynx | miosix | mipssde | posix | rtems | \
   single | tpf | vxworks | win32)
     target_thread_file=${enable_threads}
     ;;
diff -ruN gcc-8.2.0-old/gcc/configure.ac gcc-8.2.0/gcc/configure.ac
--- gcc-8.2.0-old/gcc/configure.ac	2018-04-18 11:46:58.000000000 +0200
+++ gcc-8.2.0/gcc/configure.ac	2018-08-26 16:26:15.035486303 +0200
@@ -1611,7 +1611,7 @@
     # default
     target_thread_file='single'
     ;;
-  aix | dce | lynx | mipssde | posix | rtems | \
+  aix | dce | lynx | miosix | mipssde | posix | rtems | \
   single | tpf | vxworks | win32)
     target_thread_file=${enable_threads}
     ;;
diff -ruN gcc-8.2.0-old/libgcc/config/gthr-miosix.h gcc-8.2.0/libgcc/config/gthr-miosix.h
--- gcc-8.2.0-old/libgcc/config/gthr-miosix.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-8.2.0/libgcc/config/gthr-miosix.h	2018-08-26 16:26:15.035486303 +0200
@@ -0,0 +1,55 @@
+
+// RATIONALE: make the code generated by GCC thread safe by providing a thread model
+
+#ifndef GCC_GHTR_MIOSIX_H
+#define GCC_GHTR_MIOSIX_H
+
+#include <pthread.h>
+#include <unistd.h>
+
+//Note to self: gthr.h contains useful information
+//on how a gthr-xxx.h should look like
+
+#define __GTHREADS 1
+#define __GTHREAD_HAS_COND 1
+//#define __GTHREADS_CXX0X 1 //Not yet, missing __gthread_*_timed*
+
+//In Miosix, threads are always enabled, period.
+#define __gthread_active_p() 1
+
+typedef pthread_t       __gthread_t;
+typedef pthread_key_t   __gthread_key_t; //This actually is unimplemented
+typedef pthread_once_t  __gthread_once_t;
+typedef pthread_mutex_t __gthread_mutex_t;
+typedef pthread_mutex_t __gthread_recursive_mutex_t;
+typedef pthread_cond_t  __gthread_cond_t;
+typedef struct timespec __gthread_time_t;
+
+#define __GTHREAD_MUTEX_INIT           PTHREAD_MUTEX_INITIALIZER
+#define __GTHREAD_ONCE_INIT            PTHREAD_ONCE_INIT
+#define __GTHREAD_RECURSIVE_MUTEX_INIT PTHREAD_MUTEX_RECURSIVE_INITIALIZER_NP
+#define __GTHREAD_COND_INIT            PTHREAD_COND_INITIALIZER
+#define __GTHREAD_TIME_INIT            {0,0}
+
+#define __gthread_once                    pthread_once
+#define __gthread_mutex_destroy           pthread_mutex_destroy
+#define __gthread_mutex_lock              pthread_mutex_lock
+#define __gthread_mutex_trylock           pthread_mutex_trylock
+#define __gthread_mutex_unlock            pthread_mutex_unlock
+#define __gthread_recursive_mutex_lock    pthread_mutex_lock
+#define __gthread_recursive_mutex_trylock pthread_mutex_trylock
+#define __gthread_recursive_mutex_unlock  pthread_mutex_unlock
+#define __gthread_cond_broadcast          pthread_cond_broadcast
+#define __gthread_cond_wait               pthread_cond_wait
+#define __gthread_cond_wait_recursive     pthread_cond_wait
+
+//These actually aren't implemented in Miosix, so code trying to use these will
+//fail to link, and for now it's the "desired" behaviour (better than failing
+//at runtime, at least). They are used somewhere in libstdc++ too, but it can
+//be patched to remove those uses.
+#define __gthread_key_create              pthread_key_create
+#define __gthread_key_delete              pthread_key_delete
+#define __gthread_getspecific             pthread_getspecific
+#define __gthread_setspecific             pthread_setspecific
+
+#endif //GCC_GHTR_MIOSIX_H
diff -ruN gcc-8.2.0-old/libgcc/configure gcc-8.2.0/libgcc/configure
--- gcc-8.2.0-old/libgcc/configure	2018-04-24 18:45:26.000000000 +0200
+++ gcc-8.2.0/libgcc/configure	2018-08-26 16:26:15.035486303 +0200
@@ -5444,6 +5444,7 @@
     aix)	thread_header=config/rs6000/gthr-aix.h ;;
     dce)	thread_header=config/pa/gthr-dce.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
+    miosix)	thread_header=config/gthr-miosix.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
     rtems)	thread_header=config/gthr-rtems.h ;;
diff -ruN gcc-8.2.0-old/libgcc/unwind-sjlj.c gcc-8.2.0/libgcc/unwind-sjlj.c
--- gcc-8.2.0-old/libgcc/unwind-sjlj.c	2018-01-03 11:03:58.000000000 +0100
+++ gcc-8.2.0/libgcc/unwind-sjlj.c	2018-08-26 16:26:15.039486303 +0200
@@ -91,7 +91,14 @@
   _Unwind_Personality_Fn personality;
 } _Unwind_FrameState;
 
-
+
+// RATIONALE: _Miosix_set_sjlj_ptr and _Miosix_get_sjlj_ptr make
+// exception handling thread-safe even if Miosix does not support TLS
+// NOTE: C++ uses exception support is in eh_globals.cc, is there any code that
+// triggers these to be called? Otherwise we may either keep them if Miosix
+// will support architectures with sjlj exceptions, or even remove this patch
+#ifndef _MIOSIX
+
 /* Manage the chain of registered function contexts.  */
 
 /* Single threaded fallback chain.  */
@@ -163,6 +170,32 @@
     fc_static = fc;
 }
 
+#else //_MIOSIX
+
+void _Miosix_set_sjlj_ptr(void* ptr);
+void *_Miosix_get_sjlj_ptr();
+
+void
+_Unwind_SjLj_Register (struct SjLj_Function_Context *fc)
+{
+  fc->prev=_Miosix_get_sjlj_ptr();
+  _Miosix_set_sjlj_ptr(fc);
+}
+
+static inline struct SjLj_Function_Context *
+_Unwind_SjLj_GetContext (void)
+{
+  return _Miosix_get_sjlj_ptr();
+}
+
+static inline void
+_Unwind_SjLj_SetContext (struct SjLj_Function_Context *fc)
+{
+  _Miosix_set_sjlj_ptr(fc);
+}
+
+#endif //_MIOSIX
+
 void
 _Unwind_SjLj_Unregister (struct SjLj_Function_Context *fc)
 {
diff -ruN gcc-8.2.0-old/libstdc++-v3/configure gcc-8.2.0/libstdc++-v3/configure
--- gcc-8.2.0-old/libstdc++-v3/configure	2018-07-04 13:45:51.000000000 +0200
+++ gcc-8.2.0/libstdc++-v3/configure	2018-08-27 00:47:26.361041133 +0200
@@ -15181,6 +15181,7 @@
     dce)	thread_header=config/pa/gthr-dce.h ;;
     lynx)	thread_header=config/gthr-lynx.h ;;
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
+    miosix)	thread_header=config/gthr-miosix.h ;;
     posix)	thread_header=gthr-posix.h ;;
     rtems)	thread_header=config/gthr-rtems.h ;;
     single)	thread_header=gthr-single.h ;;
diff -ruN gcc-8.2.0-old/libstdc++-v3/libsupc++/eh_alloc.cc gcc-8.2.0/libstdc++-v3/libsupc++/eh_alloc.cc
--- gcc-8.2.0-old/libstdc++-v3/libsupc++/eh_alloc.cc	2018-01-03 11:03:58.000000000 +0100
+++ gcc-8.2.0/libstdc++-v3/libsupc++/eh_alloc.cc	2018-08-26 16:26:15.039486303 +0200
@@ -73,6 +73,14 @@
 # define EMERGENCY_OBJ_COUNT	4
 #endif
 
+//RATIONALE: reduced emergency buffer for ARM microcontrollers, saves RAM
+#ifdef _MIOSIX
+# undef EMERGENCY_OBJ_SIZE
+# undef EMERGENCY_OBJ_COUNT
+# define EMERGENCY_OBJ_SIZE  160
+# define EMERGENCY_OBJ_COUNT 3
+#endif
+
 namespace __gnu_cxx
 {
   void __freeres();
diff -ruN gcc-8.2.0-old/libstdc++-v3/libsupc++/eh_globals.cc gcc-8.2.0/libstdc++-v3/libsupc++/eh_globals.cc
--- gcc-8.2.0-old/libstdc++-v3/libsupc++/eh_globals.cc	2018-01-03 11:03:58.000000000 +0100
+++ gcc-8.2.0/libstdc++-v3/libsupc++/eh_globals.cc	2018-08-26 16:26:15.039486303 +0200
@@ -41,6 +41,11 @@
 
 using namespace __cxxabiv1;
 
+// RATIONALE: __cxa_get_globals() and __cxa_get_globals_fast() have been made
+// Miosix syscalls since the __cxa_eh_globals struct needs to be provided on
+// a per-thread basis but Miosix does not support TLS
+#ifndef _MIOSIX
+
 #if _GLIBCXX_HAVE_TLS
 
 namespace
@@ -157,3 +162,5 @@
 #endif
 
 #endif
+
+#endif //_MIOSIX
diff -ruN gcc-8.2.0-old/libstdc++-v3/libsupc++/guard.cc gcc-8.2.0/libstdc++-v3/libsupc++/guard.cc
--- gcc-8.2.0-old/libstdc++-v3/libsupc++/guard.cc	2018-01-03 11:03:58.000000000 +0100
+++ gcc-8.2.0/libstdc++-v3/libsupc++/guard.cc	2018-08-26 16:26:15.039486303 +0200
@@ -190,6 +190,11 @@
 //  | _GLIBCXX_GUARD_WAITING_BIT) and some other threads are waiting until
 //				  it is initialized.
 
+// RATIONALE: __cxa_guard_[acquire|release|abort] have been made Miosix syscalls
+// as static object initialization can occur also before the kernel is started,
+// therefore at a time when using pthread_mutexe and pthread_cond is unsafe.
+#ifndef _MIOSIX
+
 namespace __cxxabiv1 
 {
 #ifdef _GLIBCXX_USE_FUTEX
@@ -425,3 +430,5 @@
 #endif
   }
 }
+
+#endif //_MIOSIX
diff -ruN gcc-8.2.0-old/libstdc++-v3/libsupc++/vterminate.cc gcc-8.2.0/libstdc++-v3/libsupc++/vterminate.cc
--- gcc-8.2.0-old/libstdc++-v3/libsupc++/vterminate.cc	2018-01-03 11:03:58.000000000 +0100
+++ gcc-8.2.0/libstdc++-v3/libsupc++/vterminate.cc	2018-08-26 16:26:15.039486303 +0200
@@ -34,6 +34,14 @@
 using namespace std;
 using namespace abi;
 
+// RATIONALE: add __attribute__((weak)) to make __verbose_terminate_handler
+// overridable to save the code size of __cxa_demangle
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace __gnu_cxx
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
@@ -41,7 +49,7 @@
   // A replacement for the standard terminate_handler which prints
   // more information about the terminating exception (if any) on
   // stderr.
-  void __verbose_terminate_handler()
+  void AW __verbose_terminate_handler()
   {
     static bool terminating;
     if (terminating)
diff -ruN gcc-8.2.0-old/libstdc++-v3/src/c++11/functexcept.cc gcc-8.2.0/libstdc++-v3/src/c++11/functexcept.cc
--- gcc-8.2.0-old/libstdc++-v3/src/c++11/functexcept.cc	2018-01-03 11:03:58.000000000 +0100
+++ gcc-8.2.0/libstdc++-v3/src/c++11/functexcept.cc	2018-08-26 16:26:15.039486303 +0200
@@ -35,6 +35,15 @@
 # define _(msgid)   (msgid)
 #endif
 
+// RATIONALE: adding __attribute__((weak)) to these functions allows redefining
+// them if compiling without exceptions to avoid pulling in exception support
+// and save code size
+#ifdef _MIOSIX
+#define AW __attribute__((weak))
+#else
+#define AW
+#endif
+
 namespace __gnu_cxx
 {
   int __snprintf_lite(char *__buf, size_t __bufsize, const char *__fmt,
@@ -46,43 +55,43 @@
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
   void
-  __throw_bad_exception()
+  AW __throw_bad_exception()
   { _GLIBCXX_THROW_OR_ABORT(bad_exception()); }
 
   void
-  __throw_bad_alloc()
+  AW __throw_bad_alloc()
   { _GLIBCXX_THROW_OR_ABORT(bad_alloc()); }
 
   void
-  __throw_bad_cast()
+  AW __throw_bad_cast()
   { _GLIBCXX_THROW_OR_ABORT(bad_cast()); }
 
   void
-  __throw_bad_typeid()
+  AW __throw_bad_typeid()
   { _GLIBCXX_THROW_OR_ABORT(bad_typeid()); }
 
   void
-  __throw_logic_error(const char* __s __attribute__((unused)))
+  AW __throw_logic_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(logic_error(_(__s))); }
 
   void
-  __throw_domain_error(const char* __s __attribute__((unused)))
+  AW __throw_domain_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(domain_error(_(__s))); }
 
   void
-  __throw_invalid_argument(const char* __s __attribute__((unused)))
+  AW __throw_invalid_argument(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(invalid_argument(_(__s))); }
 
   void
-  __throw_length_error(const char* __s __attribute__((unused)))
+  AW __throw_length_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(length_error(_(__s))); }
 
   void
-  __throw_out_of_range(const char* __s __attribute__((unused)))
+  AW __throw_out_of_range(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(out_of_range(_(__s))); }
 
   void
-  __throw_out_of_range_fmt(const char* __fmt, ...)
+  AW __throw_out_of_range_fmt(const char* __fmt, ...)
   {
     const size_t __len = __builtin_strlen(__fmt);
     // We expect at most 2 numbers, and 1 short string. The additional
@@ -98,19 +107,19 @@
   }
 
   void
-  __throw_runtime_error(const char* __s __attribute__((unused)))
+  AW __throw_runtime_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(runtime_error(_(__s))); }
 
   void
-  __throw_range_error(const char* __s __attribute__((unused)))
+  AW __throw_range_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(range_error(_(__s))); }
 
   void
-  __throw_overflow_error(const char* __s __attribute__((unused)))
+  AW __throw_overflow_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(overflow_error(_(__s))); }
 
   void
-  __throw_underflow_error(const char* __s __attribute__((unused)))
+  AW __throw_underflow_error(const char* __s __attribute__((unused)))
   { _GLIBCXX_THROW_OR_ABORT(underflow_error(_(__s))); }
 
 _GLIBCXX_END_NAMESPACE_VERSION
